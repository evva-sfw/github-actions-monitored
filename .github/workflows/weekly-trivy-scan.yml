name: Weekly Trivy Scan

on:
  schedule:
    - cron: '25 4 * * 1'  # Every Monday at 04:25 UTC
  workflow_dispatch:

jobs:
  generate-matrix:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Read repo/sha matrix from JSON
        id: set-matrix
        run: |
          MATRIX=$(jq -c . .github/allowed-actions.json)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
      - name: Output Markdown
        run: |
          BQ='```'
          {
            echo "### Allowed Repositories for Trivy Scan"
            echo ""
            echo "| Repository | SHA |"
            echo "|------------|-----|"
            jq -r '.include[] | "| \(.repo) | \(.sha) |"' .github/allowed-actions.json
            echo ""
            echo "### Copy as code:"
            echo ""
            echo "$BQ"
            echo "| Repository | SHA |"
            echo "|------------|-----|"
            jq -r '.include[] | "| \(.repo) | \(.sha) |"' .github/allowed-actions.json
            echo "$BQ"
            echo ""
            echo "### Copy for policy text field"
            echo ""
            echo "$BQ"
            jq -r '.include[] | "\(.repo)@\(.sha),"' .github/allowed-actions.json
            echo "$BQ"
          } >> $GITHUB_STEP_SUMMARY

  scan:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    permissions:
      contents: read
      security-events: write  # Required to upload SARIF to GitHub
    steps:
      - name: Checkout ${{ matrix.repo }} at ${{ matrix.sha }}
        run: |
          git clone https://github.com/${{ matrix.repo }} repo
          cd repo
          git checkout ${{ matrix.sha }}

      - name: Run Trivy filesystem scan (SARIF)
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # v0.31.0
        with:
          scan-type: fs
          scan-ref: ./repo
          format: sarif
          output: trivy-report.sarif

      - name: Upload Trivy SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@86b04fb0e47484f7282357688f21d5d0e32175fe
        with:
          sarif_file: trivy-report.sarif
          category: ${{ matrix.repo }}-${{ matrix.sha }}

      - name: Generate Trivy text report
        id: trivy_status
        run: |
          set +e
          trivy fs ./repo --format table --output trivy-report.txt --exit-code 1
          code=$?
          echo "exit_code=$code"
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          set -e # just to be save
        continue-on-error: true # this stage can fail when trivy finds issues, save exit_code for later

      - name: Add Trivy summary to GitHub Actions UI
        run: |
              {
                echo "### Trivy Scan Summary for \`${{ matrix.repo }} - ${{ matrix.sha }}\`"
                echo ""
                echo '```'
                cat trivy-report.txt
                echo '```'
                echo ""
                echo "_Full report is uploaded as an artifact._"
              } >> $GITHUB_STEP_SUMMARY

      - name: Sanitize repo name
        id: sanitize
        run: echo "repo_safe=${{ matrix.repo }}" | sed 's/\//-/g' >> $GITHUB_OUTPUT

      - name: Upload full Trivy text report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: trivy-report-${{ steps.sanitize.outputs.repo_safe }}-${{ matrix.sha }}
          path: trivy-report.txt

      - name: Fail if Trivy found issues
        if: steps.trivy_status.outputs.exit_code != '0'
        run: |
          echo "‚ùå Trivy found vulnerabilities. Failing the job."
          exit 1
